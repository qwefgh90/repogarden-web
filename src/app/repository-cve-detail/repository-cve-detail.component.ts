import { Component, OnInit, Input, OnChanges } from '@angular/core';
import { Repository } from '../class/repository';
import { Branch } from '../class/branch';
import { Commit } from '../class/commit';
import { Ng2TreeSettings, NodeSelectedEvent } from 'ng2-tree';
import { GitNode, CveCounter, dfs } from '../class/git-node';
import { tree2 as mockTree } from '../mock/mock-git-tree';
import { result1 } from '../mock/mock-cve';
import { TreeService } from '../tree.service';
import { GithubService } from '../repository.service';
import { Subscription } from 'rxjs/Subscription';

declare const alertify: any;

@Component({
    selector: 'app-repository-cve-detail',
    templateUrl: './repository-cve-detail.component.html',
    styleUrls: ['./repository-cve-detail.component.css']
})
export class RepositoryCveDetailComponent implements OnInit, OnChanges {

    @Input('selectedRepository') repository: Repository;
    @Input('selectedId') userId: string;
    @Input('selectedBranch') branch: Branch;
    selectedNodeMap: Map<string, GitNode> = new Map<string, GitNode>();
    public customClass: string = 'customClass';

    private commitsSubscription: Subscription;

    ngOnChanges() {
        if (this.branch != undefined) {
            if (this.commitsSubscription != undefined)
                this.commitsSubscription.unsubscribe();
            this.commitsSubscription = this.githubService.getCveStats(this.repository, this.branch, 0, 10).subscribe(commits => {
                this.branch.cveCommits = commits;
                if (this.branch.cveCommits.length > 0) {
                    this.loadTree(this.branch.cveCommits[0]);
                }
            });
        }
    }

    ngOnInit() {
    }

    treeSettings: Ng2TreeSettings = {
        rootIsVisible: false
    }

    getCveCount(commit: Commit): number {
        //        if (commit.tree != undefined)
        //     return dfs(commit.tree, new CveCounter());
        // else
        return undefined;
    }

    private static logEvent(message: string): void {
        console.log(message);
        alertify.message(`${message}`);
    }

    loadCve(commit: Commit, tree: GitNode) {
        console.info('load cve');
        let found = tree.children.find((node) => {
            console.info(node.value);
            return (node.path + node.value) == "pom.xml";

        }
        )
        if (found != undefined) {
            console.info("found!");
            found.cve = result1;
        }
    }

    loadTree(commit: Commit) {
        if (commit.tree == undefined) {
            console.info("loadtree in cve");
            this.githubService.getTree(this.repository, this.branch, commit.sha).subscribe(tree => {
                commit.tree = tree;
                this.loadCve(commit, commit.tree);
            });
            console.info(`tree is loaded in ${commit.sha}.`);
        }
    }

    select(commit: Commit, $event: NodeSelectedEvent) {
        console.info($event);
        let selectedNode = <GitNode>$event.node.node;
        this.selectedNodeMap[commit.sha] = selectedNode;
    }

    dummy: string = '<dependency>\n<groupId>org.scalatest</groupId>\n<artifactId>scalatest_${scala.binary.version}</artifactId>\n<scope>test</scope>\n</dependency>';
    dumList: Array<string> = this.dummy.split('\n');

    constructor(public githubService: GithubService, public treeService: TreeService) { }
}

import { Component, OnInit, Input, OnChanges } from '@angular/core';
import { Repository } from '../class/repository';
import { Branch } from '../class/branch';
import { Commit } from '../class/commit';
import { Ng2TreeSettings, NodeSelectedEvent } from 'ng2-tree';
import { GitNode, CveCounter, dfs } from '../class/git-node';
import { tree as mockTree } from '../mock/mock-git-tree'
import { TreeService } from '../tree.service';

declare const alertify: any;

@Component({
    selector: 'app-repository-cve-detail',
    templateUrl: './repository-cve-detail.component.html',
    styleUrls: ['./repository-cve-detail.component.css']
})
export class RepositoryCveDetailComponent implements OnInit, OnChanges {

    @Input('selectedRepository') repository: Repository;
    @Input('selectedId') userId: string;
    @Input('selectedBranch') branch: Branch;
    selectedNodeMap: Map<string, GitNode> = new Map<string, GitNode>();
    public customClass: string = 'customClass';

    ngOnChanges() {
        if (this.branch != undefined) {
            if (this.branch.getCommits() != undefined) {
                let commit = this.branch.getCommits()[0]
            }
            //            if (commit != undefined)
            //                this.loadTree(commit);
        }
    }

    ngOnInit() {
    }

    treeSettings: Ng2TreeSettings = {
        rootIsVisible: false
    }

    getCveCount(commit: Commit): number {
        if (commit.tree != undefined)
            return dfs(commit.tree, new CveCounter());
        else
            return undefined;
    }

    private static logEvent(message: string): void {
        console.log(message);
        alertify.message(`${message}`);
    }

    loadTree(commit: Commit) {
        commit.getTree(this.treeService, this.repository.owner, this.repository.name).then(tree => {
            RepositoryCveDetailComponent.logEvent(`tree is loaded in ${commit.sha}.`);
        });
    }

    select(commit: Commit, $event: NodeSelectedEvent) {
        console.info($event);
        let selectedNode = <GitNode>$event.node.node;
        this.selectedNodeMap[commit.sha] = selectedNode;
    }

    dummy: string = '<dependency>\n<groupId>org.scalatest</groupId>\n<artifactId>scalatest_${scala.binary.version}</artifactId>\n<scope>test</scope>\n</dependency>';
    dumList: Array<string> = this.dummy.split('\n');

    constructor(public treeService: TreeService) { }
}
